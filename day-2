# Import required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import statsmodels.api as sm
from statsmodels.formula.api import ols

# Set the style for our plots
plt.style.use('seaborn-v0_8')
sns.set(font_scale=1.2)

# Load the dataset
# If you have the file locally:
df = pd.read_csv('large_sales_data.csv')

# If you don't have the file locally, you can create the dataframe with the data from the image
# Uncomment and use this if needed:
'''
data = {
    'Group': ['Radio Ads', 'Online Ads', 'Radio Ads', 'Radio Ads', 'Online Ads', 'Online Ads', 'Radio Ads', 'TV Ads'],
    'Sales': [459.35, 304.21, 348.63, 377.22, 317.20, 346.31, 330.39, 251.62],
    'Ad_Cost': [3886.13, 3441.62, 4797.23, 2586.60, 4816.35, 1540.01, 2935.02, 2070.55],
    'Clicks': [7948, 5308, 7024, 3928, 3330, 588, 7214, 9630]
}
df = pd.DataFrame(data)
'''

# Display first few rows of the dataset
print("Dataset:")
print(df.head())

# Basic descriptive statistics
print("\nDescriptive Statistics:")
print(df.describe())

# First, check the datatypes of your columns
print(df.dtypes)

# Convert columns to numeric if they contain string values that look like numbers
for col in df.columns:
    if df[col].dtype == 'object':
        try:
            df[col] = pd.to_numeric(df[col])
        except:
            print(f"Could not convert column {col} to numeric")

# Remove any non-numeric columns for correlation analysis
numeric_df = df.select_dtypes(include=['number'])
print("Columns used for correlation:", numeric_df.columns.tolist())

# Now try the correlation
correlation_matrix = numeric_df.corr(method='pearson')
print(correlation_matrix)

# 1. Correlation Analysis
print("\n1. CORRELATION ANALYSIS")
print("\nPearson Correlation Matrix:")
correlation_matrix = df.corr(method='pearson')
print(correlation_matrix)

# Visualize correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, fmt='.2f')
plt.title('Correlation Matrix Heatmap')
plt.tight_layout()
plt.show()

# Create scatter plots with regression lines
fig, axes = plt.subplots(2, 2, figsize=(16, 12))

# Sales vs Ad_Cost
sns.scatterplot(x='Ad_Cost', y='Sales', data=df, hue='Group', ax=axes[0, 0])
sns.regplot(x='Ad_Cost', y='Sales', data=df, scatter=False, ax=axes[0, 0], color='black')
axes[0, 0].set_title('Sales vs Ad Cost')

# Sales vs Clicks
sns.scatterplot(x='Clicks', y='Sales', data=df, hue='Group', ax=axes[0, 1])
sns.regplot(x='Clicks', y='Sales', data=df, scatter=False, ax=axes[0, 1], color='black')
axes[0, 1].set_title('Sales vs Clicks')

# Ad_Cost vs Clicks
sns.scatterplot(x='Clicks', y='Ad_Cost', data=df, hue='Group', ax=axes[1, 0])
sns.regplot(x='Clicks', y='Ad_Cost', data=df, scatter=False, ax=axes[1, 0], color='black')
axes[1, 0].set_title('Ad Cost vs Clicks')

# Group-wise Sales comparison
sns.barplot(x='Group', y='Sales', data=df, ax=axes[1, 1])
axes[1, 1].set_title('Sales by Advertising Group')
axes[1, 1].set_ylim(0, df['Sales'].max() * 1.2)

plt.tight_layout()
plt.show()

# 2. Regression Analysis
print("\n2. REGRESSION ANALYSIS")

# A. Simple Linear Regression: Sales vs Ad_Cost
print("\nA. Simple Linear Regression: Sales ~ Ad_Cost")
X = sm.add_constant(df['Ad_Cost'])
model_sales_cost = sm.OLS(df['Sales'], X).fit()
print(model_sales_cost.summary())

# Visualize the regression line
plt.figure(figsize=(10, 6))
sns.regplot(x='Ad_Cost', y='Sales', data=df, line_kws={'color': 'red'})
plt.title('Sales vs Ad Cost with Regression Line')
plt.tight_layout()
plt.show()

# B. Simple Linear Regression: Sales vs Clicks
print("\nB. Simple Linear Regression: Sales ~ Clicks")
X = sm.add_constant(df['Clicks'])
model_sales_clicks = sm.OLS(df['Sales'], X).fit()
print(model_sales_clicks.summary())

# Visualize the regression line
plt.figure(figsize=(10, 6))
sns.regplot(x='Clicks', y='Sales', data=df, line_kws={'color': 'red'})
plt.title('Sales vs Clicks with Regression Line')
plt.tight_layout()
plt.show()

# C. Multiple Linear Regression: Sales vs Ad_Cost + Clicks
print("\nC. Multiple Linear Regression: Sales ~ Ad_Cost + Clicks")
formula = 'Sales ~ Ad_Cost + Clicks'
model_multiple = ols(formula, data=df).fit()
print(model_multiple.summary())

# 3. Hypothesis Testing
print("\n3. HYPOTHESIS TESTING")

# A. t-test: Is there a significant difference in Sales between different advertising groups?
# First, let's prepare the data for different groups
groups = df['Group'].unique()
group_data = {}

print("\nA. t-test: Sales between different advertising groups")
for group in groups:
    group_data[group] = df[df['Group'] == group]['Sales']
    print(f"{group} (n={len(group_data[group])}): Mean = {group_data[group].mean():.2f}, SD = {group_data[group].std():.2f}")

# Compare groups if there are at least 2 groups
if len(groups) >= 2:
    # Let's do pairwise t-tests between the groups
    for i in range(len(groups)):
        for j in range(i+1, len(groups)):
            group1 = groups[i]
            group2 = groups[j]
            
            if len(group_data[group1]) > 1 and len(group_data[group2]) > 1:
                t_stat, p_value = stats.ttest_ind(group_data[group1], group_data[group2], equal_var=False)
                print(f"\nt-test: {group1} vs {group2}")
                print(f"t-statistic: {t_stat:.4f}")
                print(f"p-value: {p_value:.4f}")
                print(f"Interpretation: {'Significant difference' if p_value < 0.05 else 'No significant difference'} in Sales between {group1} and {group2} at α=0.05")
            else:
                print(f"\nCannot perform t-test between {group1} and {group2} due to insufficient samples")

# Visualize the groups
plt.figure(figsize=(10, 6))
sns.boxplot(x='Group', y='Sales', data=df)
plt.title('Sales by Advertising Group')
plt.xlabel('Advertising Group')
plt.ylabel('Sales')
plt.tight_layout()
plt.show()

# B. ANOVA: Compare Sales across advertising groups
print("\nB. ANOVA: Compare Sales across advertising groups")
groups_list = [df[df['Group'] == group]['Sales'] for group in groups if len(df[df['Group'] == group]) > 0]

# Only perform ANOVA if we have at least 2 groups with data
if len(groups_list) >= 2 and all(len(g) > 0 for g in groups_list):
    f_stat, p_value = stats.f_oneway(*groups_list)
    print(f"F-statistic: {f_stat:.4f}")
    print(f"p-value: {p_value:.4f}")
    print(f"Interpretation: {'Significant difference' if p_value < 0.05 else 'No significant difference'} in Sales across advertising groups at α=0.05")
else:
    print("Cannot perform ANOVA due to insufficient data in groups")

# C. Test correlation significance
print("\nC. Testing significance of correlations")
for col1 in ['Sales', 'Ad_Cost', 'Clicks']:
    for col2 in ['Sales', 'Ad_Cost', 'Clicks']:
        if col1 != col2:
            r, p = stats.pearsonr(df[col1], df[col2])
            print(f"Correlation between {col1} and {col2}: r = {r:.4f}, p-value = {p:.4f}")
            print(f"Interpretation: Correlation is {'significant' if p < 0.05 else 'not significant'} at α=0.05")
            print()

# Summary of findings
print("\nSUMMARY OF FINDINGS:")
print("1. Correlation Analysis:")
print(f"   - Sales-Ad_Cost correlation: {correlation_matrix.loc['Sales', 'Ad_Cost']:.2f}")
print(f"   - Sales-Clicks correlation: {correlation_matrix.loc['Sales', 'Clicks']:.2f}")
print(f"   - Ad_Cost-Clicks correlation: {correlation_matrix.loc['Ad_Cost', 'Clicks']:.2f}")

print("\n2. Regression Analysis:")
print(f"   - Sales vs Ad_Cost: R-squared = {model_sales_cost.rsquared:.4f}, p-value = {model_sales_cost.f_pvalue:.4f}")
print(f"   - Sales vs Clicks: R-squared = {model_sales_clicks.rsquared:.4f}, p-value = {model_sales_clicks.f_pvalue:.4f}")
print(f"   - Multiple Regression (Sales ~ Ad_Cost + Clicks): R-squared = {model_multiple.rsquared:.4f}, p-value = {model_multiple.f_pvalue:.4f}")

print("\n3. Hypothesis Testing Results:")
# Add your summary of hypothesis testing results here based on the actual outcomes
